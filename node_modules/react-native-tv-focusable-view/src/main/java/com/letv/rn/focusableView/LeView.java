package com.letv.rn.focusableView;

import android.content.Context;
import android.graphics.Rect;
import android.support.annotation.Nullable;
import android.view.KeyEvent;
import android.view.View;

import com.facebook.react.ReactRootView;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactContext;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.uimanager.events.RCTEventEmitter;

public class LeView extends ReactRootView {

    public boolean IsWrapper=false;
    private LeView lastFocusedLeView;
//    public boolean isselcet=true;

    public LeView(Context context) {
        super(context);
        setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);
        setFocusable(true);
    }

    public void SetIsWrapper(boolean isWrapper) {
        this.IsWrapper = isWrapper;
    }

    public void SetFocus(boolean focus) {
        if (focus) {
            this.requestFocus();
        }
    }

    public void SetSelected(boolean selectOrNot) {
        WritableMap event = Arguments.createMap();
        event.putString("type", "select");
        event.putBoolean("isSelected", selectOrNot);
        ReactContext reactContext = (ReactContext) getContext();
        reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
                getId(),
                "topChange",
                event);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent e) {
        WritableMap event = Arguments.createMap();
//        LeView parentView=null;
//        if(this.getParent().getParent() instanceof LeView) {
//             parentView = (LeView) (this.getParent().getParent());
//        }
        switch (keyCode) {
            case KeyEvent.KEYCODE_INFO:
                event.putString("key", "INFO");
                break;
            case KeyEvent.KEYCODE_DPAD_CENTER:
                event.putString("key", "DPAD_CENTER");
                break;
            case KeyEvent.KEYCODE_DPAD_DOWN:
                event.putString("key", "DPAD_DOWN");
//                if(parentView!=null&&parentView instanceof LeView&&parentView.IsWrapper)
//                    parentView.isselcet=false;
                break;
            case KeyEvent.KEYCODE_DPAD_UP:
                event.putString("key","DPAD_UP");
//                if(parentView!=null&&parentView instanceof LeView&&parentView.IsWrapper)
//                    parentView.isselcet=false;
                break;
            case KeyEvent.KEYCODE_DPAD_RIGHT:
                event.putString("key","DPAD_RIGHT");
//                if(parentView!=null&&parentView instanceof LeView&&parentView.IsWrapper)
//                    parentView.isselcet=true;
                break;
            case KeyEvent.KEYCODE_DPAD_LEFT:
                event.putString("key","DPAD_LEFT");
                break;
            default:
                event.putString("key", "UNKNOWN");
                break;
        }

        event.putInt("keyCode", keyCode);
        ReactContext reactContext = (ReactContext) getContext();
        reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
                getId(),
                "topSelect",
                event);

        return super.onKeyDown(keyCode, e);
    }

    @Override
    public View focusSearch(View focused, int direction) {
        View originToFocusView = super.focusSearch(focused, direction);
        View viewToFocus = originToFocusView;
//        if (this.isselcet) {
            if (this.IsWrapper) {
                // wrapper内部不进行特殊处理
                // 焦点移出当前容器， 记录当前的焦点位置，并设置选中
                if (originToFocusView != null && this.indexOfChild(originToFocusView) < 0) {
                    View lastFocusedView = this.getFocusedChild().findFocus();
                    if (lastFocusedView instanceof LeView) {
                        this.lastFocusedLeView = (LeView) lastFocusedView;
                        this.lastFocusedLeView.SetSelected(true);
                    }
                }
            } else {
                // 对于将要获取wrapper内部焦点的搜索，判断内部是否有记录上次焦点的LeView
                // 如果有，则返回上次焦点的LeView, 而不是默认的搜索结果
                if (originToFocusView instanceof LeView) {
                    LeView originToFocusLeView = (LeView) originToFocusView;

                    View parentView = (View) originToFocusLeView.getParent();
                    if (parentView instanceof LeView) {
                        LeView parentLeView = ((LeView) parentView);

                        if (parentLeView.IsWrapper && parentLeView.lastFocusedLeView != null) {
                            viewToFocus = parentLeView.lastFocusedLeView;
                        }
                    }
//                    else {
//                        View parentfoucsView = (View) parentView.getParent();
//                        if (parentfoucsView instanceof LeView) {
//                            LeView parentLeView = ((LeView) parentfoucsView);
//
//                            if (parentLeView.IsWrapper && parentLeView.lastFocusedLeView != null) {
//                                viewToFocus = parentLeView.lastFocusedLeView;
//                            }
//                        }
//                    }
                }
            }
//        }
        return viewToFocus;
    }

    @Override
    protected void onFocusChanged(boolean gainFocus, int direction,
                                  @Nullable Rect previouslyFocusedRect) {
        WritableMap event = Arguments.createMap();
        event.putString("type", "focus");
        event.putBoolean("focus", gainFocus);
        ReactContext reactContext = (ReactContext) getContext();
        reactContext.getJSModule(RCTEventEmitter.class).receiveEvent(
                getId(),
                "topChange",
                event);

        super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);
    }
}
