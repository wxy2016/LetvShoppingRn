import React from 'react';
import {
  Animated,
  View,
} from 'react-native';

var LeView = require('./LeView');

function focusableView(WrappedComponent, isAnimated = false) {
  class FocusableView extends React.Component {
    constructor() {
      super();

      this.state = {
        focus: false,
        selected: false,
        scaleAnim: new Animated.Value(1), // default scale
      }

      this.onFocus = this.onFocus.bind(this);
      this.onBlur = this.onBlur.bind(this);
      this.onSelectChange = this.onSelectChange.bind(this);
      this.onPressRight=this.onPressRight.bind(this);
      this.onPressDown=this.onPressDown.bind(this);
      this.onPressUp=this.onPressUp.bind(this);
    }

    onSelectChange(selectOrNot) {
      this.setState({
        selected: selectOrNot
      })
    }

    onFocus() {
      requestAnimationFrame(() => {
        this.setState({
          focus: true,
          selected: false
        });

        if (isAnimated) {
          Animated.timing(
            this.state.scaleAnim, {
              toValue: 1.1,
              duration: 150,
            }
          ).start();
        }
      });

      if (!this.state.selected) {
         this.props.onFocused && this.props.onFocused();
      }
    }
    onPressRight(){
      this.props.onPressRight && this.props.onPressRight();
    }
    onPressDown(){
       this.props.onPressDown && this.props.onPressDown();
    }
    onPressUp(){
      this.props.onPressUp && this.props.onPressUp();
    }
    onBlur() {
      requestAnimationFrame(() => {
        this.setState({
          focus: false
        });

        if (isAnimated) {
          Animated.timing(
            this.state.scaleAnim, {
              toValue: 1,
              duration: 150,
            }
          ).start();
        }
      });

      this.props.onBlured && this.props.onBlured();
    }

    render() {
      let viewStyle = [{ flex: 1, alignItems: 'center', justifyContent: 'center' }];

      if (isAnimated) {
        viewStyle.push({
          transform: [{ scale: this.state.scaleAnim }]
        });
      }

      const { style, ...otherProps } = this.props;

      const innerView = isAnimated ?
        (
          <Animated.View style={viewStyle}>
             <WrappedComponent {...otherProps} focus={this.state.focus} selected={this.state.selected} />
          </Animated.View>
        ) :
        (
          <View style={viewStyle}>
            <WrappedComponent {...otherProps} focus={this.state.focus} selected={this.state.selected} />
          </View>
        );

      return (
        <LeView {...this.props} onFocus={this.onFocus} onBlur={this.onBlur} onSelectChange={this.onSelectChange} onPressRight={this.onPressRight} onPressDown={this.onPressDown} onPressUp={this.onPressUp}>
          {innerView}
        </LeView>
      );
    }
  };

  const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';

  FocusableView.propTypes = {};
  FocusableView.defaultProps = {};
  FocusableView.displayName = `FocusableView(${wrappedComponentName})`;

  return FocusableView;
}

module.exports = focusableView;
