var Image = require('Image');
var NativeMethodsMixin = require('react/lib/NativeMethodsMixin');
var React = require('React');
var ReactNativeViewAttributes = require('ReactNativeViewAttributes');
var ReactPropTypes = require('react/lib/ReactPropTypes');
var UIManager = require('UIManager');
var View = require('View');
var ColorPropType = require('ColorPropType');

var requireNativeComponent = require('requireNativeComponent');
var resolveAssetSource = require('resolveAssetSource');

var LeView = React.createClass({
  mixins: [NativeMethodsMixin],

  propTypes: {
    ...View.propTypes,
    focus: React.PropTypes.bool,
    isWrapper: React.PropTypes.bool,
  },

  render: function() {
    var nativeProps = {
      ...this.props,
    };
    if (this.props.source) {
      nativeProps.source = resolveAssetSource(this.props.source);
    }

    return <NativeLeView onChange={this._onFocusChange} onSelect={this._onKeyDown} {...nativeProps} />;
  },

  _onFocusChange: function(event) {
    const eventType = event.nativeEvent.type;

    if (eventType === "focus") {
      const focus = event.nativeEvent.focus;

      if (focus) {
        this.props.onFocus && this.props.onFocus();
      } else {
        this.props.onBlur && this.props.onBlur();
      }
    }

    if (eventType === "select") {
      const isSelected = event.nativeEvent.isSelected;

      this.props.onSelectChange && this.props.onSelectChange(isSelected);
    }
  },

  _onKeyDown: function(event) {
    const { key, keyCode } = event.nativeEvent;

    switch (key) {
      case 'DPAD_CENTER':
        this.props.onPress && this.props.onPress();
        break;
      case 'DPAD_DOWN':
        this.props.onPressDown && this.props.onPressDown();      
        break;
      case 'DPAD_UP':
        this.props.onPressUp && this.props.onPressUp();    
        break;
      case 'DPAD_RIGHT':
        this.props.onPressRight && this.props.onPressRight();    
        break;
      case 'DPAD_LEFT':
        this.props.onPressLeft && this.props.onPressLeft();      
        break;
      case 'INFO':
        this.props.onFuncPress && this.props.onFuncPress();
        break;
      default:
        this.props.onKeyDown && this.props.onKeyDown(keyCode);
    }
  },
});

var NativeLeView = requireNativeComponent('LeView', LeView, {
  nativeOnly: {}
});

module.exports = LeView;
